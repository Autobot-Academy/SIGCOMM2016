  <div id="netpl-program" class="netpl-program">
    <ul class="program" data-role="listview" data-filter="true" data-inset="true" data-theme="d" data-dividertheme="a" placeholder="Filter program...">
<?php
      tprog_add_header("Monday, August 22, 2016", "prog-monday");
      tprog_add_session("9:00am - 9:15am", "Opening Remarks", "", "", "prog-monday");
      tprog_add_session("9:15am- 10:30am", "Languages that will come ...", "", "", "prog-monday");
      tprog_add_keynote("Update on P4: Where are we now, and where are we heading toward?", "Changhoon Kim (Barefoot Networks)", "Since its original publication, P4 has been drawing significant attention from both networking industry and research community. Motivated by that, industry experts and research groups have formed the P4 Language Consortium and have been nurturing the language to produce an industry-wide common data-plane programming framework. In this talk I will summarize what has happened to P4 since its original publication, what kinds of activities are currently ongoing, who in the field of networking can benefit from P4 and how, what kinds of novel networking applications are being developed in P4, how we expect the language and its associated development tools to evolve, and what kinds of interesting research problems arise as data-plane programmability becomes commonplace.", "Changhoon Kim is Director of System Architecture at Barefoot Networks and is working actively for the P4 Language Consortium (P4.org) as a co-chair of the P4 Design Working Group. Before getting involved with P4.org and Barefoot, he worked at Windows Azure, Microsoft&rsquo;s cloud-service division, and led engineering and research projects on the architecture, performance, and management of datacenter networks. Chang is interested in programmable network dataplane, network monitoring and diagnostics, network verification, self-programming/configuring networks, and debugging and diagnosis of large-scale distributed systems. Chang received Ph.D. from Princeton University. Many of his research contributions &mdash; including VL2, Seawall, EyeQ, Ananta, and SEATTLE &mdash; are adopted in large production networks.", "images/program/netpl/changhoon-kim.jpg", "", "prog-monday");

      tprog_add_keynote("P4FPGA: High-Level Synthesis for Networking", "Han Wang, Ki Suh Lee, Vishal Shrivastav, Hakim Weatherspoon (Cornell University)", "Field-programmable gate arrays (FPGAs) are often used to prototype custom packet processing algorithms. FPGAs are appealing because they balance the speed of hardware and the flexibility of software. From a programming language perspective, domain specific languages (DSLs), such as P4and PX, are emerging to allow succinct expression of packet processing algorithms. What remains difficult, is the process to translate high level DSLs to low-level hardware description language, such as Verilog, in order to generate FPGA firmware. This talk presents P4FPGA, an open-source framework that enables compilation of high-level P4 language to FPGA firmware. Our framework translates a given P4 program through a number of intermediate steps. It leverages existing intermediate representations of a P4 program,and generates corresponding Bluespec System Verilog (BSV) for simulation and synthesis. In addition, we provide runtime support for a packet processing algorithm to enable communication with network interfaces and host OS through PCI express bus. We have implemented a number of P4 applications on top of our framework to show its general applicability.", "", "", "", "prog-monday");

      tprog_add_keynote("The Next 700 Network Programming Languages", "Nate Foster (Cornell University)", "Specification and verification of computer networks has become a reality in recent years, with the emergence of domain-specific programming languages and automated verification tools. But the design of these languages and tools has been largely ad hoc, driven more by the needs of applications and the capabilities of hardware than by any foundational principles. This talk will present NetKAT, a language for programming networks based on a well-studied mathematical foundation, Kleene Algebra with Tests (KAT). The talk will describe the design of the language, its semantic underpinnings, and extensions with features to support stateful and probabilistic programming.<br/><br/>NetKAT is joint work with colleagues at Cornell, Facebook, Inhabited Type, Princeton, Samsung, UCL, and UMass Amherst.", "Nate Foster is an Assistant Professor of Computer Science at Cornell University. The goal of his search is developing programming languages and tools for building reliable systems. He received a PhD in Computer Science from theUniversity of Pennsylvania in 2009, an MPhil in History and Philosophy of Science from Cambridge University in 2008, and a BA in Computer Science from Williams College in 2001. His awards include a Sloan Research Fellowship, an NSF CAREER Award, a Most Influential POPL Paper Award, a Tien &#39;72 Teaching Award, a Google Research Award, a Yahoo! Academic Career Enhancement Award, and the Morris and Dorothy Rubinoff Award.", "images/program/netpl/nate-foster.png", "", "prog-monday");

      tprog_add_session("10:30am - 11:00am", "Coffee Break", "", "", "prog-monday");
      tprog_add_session("11:00am- 12:30pm", "... for the needs of today and tomorrow", "", "", "prog-monday");
      tprog_add_keynote("Temporal NetKAT", "David Walker (Princeton University)", "Over the past 5-10 years, the rise of software-defined networking (SDN) has inspired a wide range of new systems, libraries, hypervisors and languages for programming, monitoring, and debugging network behavior. Oftentimes, these systems are disjoint&mdash;one language for programming and another for verification, and yet another for run-time monitoring and debugging. In this paper, we present a new, unified framework, called Temporal NetKAT, capable of facilitating all of these tasks at once. As its name suggests, Temporal NetKAT is the synthesis of two formal theories: past-time (finite trace) linear temporal logic and (network) Kleene Algebra with Tests. Temporal predicates allow programmers to write down concise properties of a packet&rsquo;s path through the network and to make dynamic packet-forwarding, access control or debugging decisions on that basis. In addition to being useful for programming, the combined equational theory of LTL and NetKAT facilitates proofs of path-based correctness properties. Using new, general, proof techniques, we show that the equational semantics is sound with respect to the denotational semantics, and, for a class of programs we call network-wide programs, complete. We have also implemented a compiler for temporal NetKAT, evaluated its performance on a range of benchmarks, and studied the effectiveness of several optimizations.<br/><br/>This is joint work with Ryan Beckett and Michael Greenberg.", "David Walker is a Professor of Computer Science at Princeton University. He received his B.Sc. from Queen's University, Canada in 1995 and his Ph.D. in Computer Science from Cornell University in 2001. His research interests include programming language theory, design and implementation of all kinds. He is especially interested in type systems and the development of new domain-specific programming languages. He won an NSF Career award in 2003 and Alfred Sloan Fellowship in 2004. In 2007, with his students and colleagues at Princeton, he won the PLDI best paper award for the paper entitled Fault-Tolerant Typed Assembly Language. In 2008, his paper From System F to Typed Assembly Language, co-authored with Greg Morrisett, Karl Crary and Neal Glew, won a 10-year retrospective award for most influential POPL 1998 paper. In 2013, with his students and colleagues at Princeton and Cornell, he won the NSDI community award for his paper on Composing Software-Defined Networks. He served as an associate editor for ACM TOPLAS from 2007-2015, as the Program Chair for POPL 2015, and won the ACM SIGPLAN Robin Milner Young Researcher Award in 2015.", "images/program/netpl/david-walker.jpg", "", "prog-monday");

      tprog_add_keynote("Towards Correct-by-Construction SDN", "Leonid Ryzhyk (Samsung Research America), Nikolaj Bjorner (Microsoft Research), Marco Canini (Universit&eacute; catholique de Louvain, Belgium), Jean-Baptiste Jeannin, Nina Narodytska, Cole Schlesinger, Douglas B. Terry (Samsung Research America), George Varghese (Microsoft Research)", "High-level SDN languages raise the level of abstraction in SDN programming from managing individual switches to programming network-wide policies. In this talk, we present Cocoon (for Correct by Construction Networking), an SDN programming language designed around the idea of iterative refinement. The network programmer starts with a high-level functional description of the desired network behavior, focusing on the service the network should provide to each packet, as opposed to how this service is implemented within the network fabric. The programmer then iteratively refines the top-level specification, adding details of the topology, routing, fault recovery, etc., until reaching a level of detail sufficient for the Cocoon compiler to generate an SDN application that manages network switches via the southbound interface.", "", "", "files/program/netpl/netpl16-final4.pdf", "prog-monday");

      tprog_add_keynote("NEMO Engine, A Model Driven Compiler to Execute User&#39;s Intent and Manage Service Lifecycle by Multi Layer State Machine", "Yinben Xia (Huawei Technologies)", "In last year&#39;s NetPL workshop, I introduced an intent oriented network service programming language - NEMO. This time, I will introduce NEMO&#39;s model driven compiler, which compiles intent language to real network executable interface. Second, I will introduce a multi layer state machine engine in NEMO compiler, which will handle various changes from equipments, requirement or governance policy. This engine provides an automatic change management capability for whole service lifecycle. In the last, I will update NEMO&#39;s open source implementation progress.", "Dr. Yinben Xia is a senior staff researcher within Huawei&#39;s network research department from 2008. He dedicated his research effort in network architecture and SDN technologies. In recent two years, he lead a team to design and developer a NaaS (Network as a Service) programming language (NEMO Project). He owns 15 patents in related domain. He is leading a team to carry out SDN/NEMO research in Beijing. Before joining Huawei, Dr. Xia worked at IBM China Research Lab for 4 years after he got PH.D from Beijing University of Aeronautics and Astronautics.", "images/program/netpl/yinben-xia.jpg", "", "prog-monday");

      tprog_add_keynote("Interactive Query for Dynamic Network Analytics", "Haoyu Song (Huawei Technologies)", "Network data plane needs to be interactively programmed in order to support Dynamic Network Analytics (DNA). We envision the high level DNA applications can be break down into a set of queries and the queries can be further compiled into incremental configurations to the data plane. We emphasize the need to define standard DNA APIs and/or query language for DNA system.", "Haoyu Song is a principal architect at Huawei Technologies. He is a leading researcher on SDN programmable data plane. His current research interests span all aspects of the SDN/NFV ecosystem. He was a researcher at Bell Labs, Alcatel-Lucent before joining Huawei. He hold a doctoral degree in computer engineering from Washington University in St. Louis.", "images/program/netpl/haoyu-song.jpg", "", "prog-monday");

      tprog_add_session("12:30pm - 2:00pm", "Lunch Break", "", "", "prog-monday");
      tprog_add_session("2:00pm- 3:30pm", "With advanced methods to soar ...", "", "", "prog-monday");
      tprog_add_keynote("Formal Semantics and Automated Verification for the Border Gateway Protocol", "Konstantin Weitz, Doug Woos, Emina Torlak, Michael D. Ernst, Arvind Krishnamurthy, Zachary Tatlock (University of Washington)", "We present the first mechanized formal semantics of BGP (implemented in the Coq proof assistant) that models all required features of the BGP specification RFC-4271 modulo low-level details. We demonstrate our semantic's correctness and usefulness by: 1) extending and formalizing the pen-and-paper proof by Gao & Rexford on the convergence of BGP, revealing necessary extensions to their original configuration guidelines; 2) building the Bagpipe tool which automatically checks that BGP configurations adhere to given policy specifications, revealing 19 apparent errors in three ASes with over 240,000 lines of BGP configuration; and 3) testing the BGP simulator C-BGP, revealing one bug.", "", "", "files/program/netpl/netpl16-final2.pdf", "prog-monday");

      tprog_add_keynote("Symmetries and Surgeries for Network Verification and Quantitative Network Analysis", "Nikolaj Bjorner (Microsoft Research)", "Packet switched networks build in redundancies that enable scale and fault tolerance. Such redundancies are conveniently implemented by placing routers in symmetric or near symmetric configurations. The symmetries are also present at the level of routing tables. When it comes to checking properties of such networks, whether it being reachability or quantitative properties, such as congestion, the gain in recognizing such symmetries can be dramatic. Reducing the networks to their asymmetric core enables scaling analysis by order of magnitudes compared to a straight-forward analysis. In this talk I describe our efforts around extracting and exploiting symmetries and bisimulations in data-center and wide-area networks. In this quest we develop algorithms that find bisimilar routing states that exploit properties of packet switched routers. We also introduce a data-structure (ddNF) for extracting sets of IP headers that are treated equivalently from the point of view of routing tables. We then develop a notion of bisimulations to quantitative settings.", "Nikolaj Bjorner is a Principal Researcher at Microsoft Research, Redmond, working in the area of Automated Theorem Proving and Software Engineering. His current main line of work is around the state-of-the art theorem prover Z3, which is used as a foundation of several software engineering tools. Z3 is developed by Leonardo de Moura, Nikolaj Bjorner and Christoph Wintersteiger. Z3 received the 2015 ACM SIGPLAN Software System&rsquo;s award. Previously, he designed the DFSR, Distributed File System - Replication, shipped with Windows Server since 2005 and before that worked on distributed file sharing systems at a startup XDegrees, and program synthesis and transformation systems at the Kestrel Institute. He received his Master&rsquo;s and Ph.D. degrees in computer science from Stanford University, and spent the first three years of university at DTU and DIKU.", "images/program/netpl/nikolaj-bjorner.jpg", "", "prog-monday");

      tprog_add_keynote("Verifying Reachability in Networks with Mutable Datapaths", "Aurojit Panda (UC Berkeley)", "Recent work has made great progress in verifying the forwarding correctness of networks. However, these approaches cannot be used to verify networks containing middleboxes, such as caches and firewalls, whose forwarding behavior depends on previously observed traffic. We explore how to verify reachability properties for networks that include such &quot;mutable datapath&quot; elements. We want our verification results to hold not just for the given network, but also in the presence of failures. The main challenge lies in scaling the approach to handle large and complicated networks, We address by developing and leveraging the concept of slices, which allow network-wide verification to only require analyzing small portions of the network. We show that with slices the time required to verify an invariant on many production networks is independent of the size of the network itself.", "Aurojit Panda is a PhD candidate at UC Berkeley advised by Scott Shenker. His research largely focuses on how to simplify developing and deploying new network services.", "images/program/netpl/aurojit-panda.jpg", "", "prog-monday");

      tprog_add_item("Student Pitches", "", "", "", "", "", "prog-monday");
      tprog_add_session("3:30pm - 4:00pm", "Coffee Break", "", "", "prog-monday");
      tprog_add_session("4:00pm- 5:00pm", "... together networking and PL will roar", "", "", "prog-monday");
      tprog_add_keynote("Symbolic Execution &mdash; Model Equivalence &amp; Applications", "Matei Popovici, Radu Stoenescu, Lorina Negreanu, Costin Raiciu (University Politehnica of Bucharest)", "Symbolic execution has been applied to network dataplane code (e.g. middlebox C code), to capture a series of interesting bugs - however it does not scale very well, with verification times in the order of minutes to hours per box.

Thus, all symbolic execution papers use models instead of the real code to perform symbolic execution in reasonable time;

There is one downside: models may be written at different abstraction levels and offer no strong guarantees that the model is a faithful representation of the real code. We present a possible solution which essentially relies on verifying model equivalence.", "", "", "files/program/netpl/netpl16-final5.pdf", "prog-monday");

      tprog_add_keynote("Monitoring as a Design Target for Programmable Switches", "Rodrigo Fonseca (Brown University)", "To be announced soon.", "", "images/program/netpl/rodrigo-fonseca.jpg", "", "prog-monday");

      tprog_add_item("Closing Remarks", "", "", "", "", "", "prog-monday");
?>
    </ul>
  </div>
